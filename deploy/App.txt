<!DOCTYPE html>
<html>
<head>
    <title>Print Portfolio Item Grid</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Mon May 23 2016 11:25:56 GMT-0400 (EDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon May 23 2016 11:25:56 GMT-0400 (EDT)";
        var CHECKSUM = 74949621199;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('ExampleBulkRecordMenuItem', {
    alias: 'widget.examplebulkrecordmenuitem',
    extend: 'Rally.ui.menu.bulk.MenuItem',

    config: {
        onBeforeAction: function(){
//            console.log('onbeforeaction');
        },

        /**
         * @cfg {Function} onActionComplete a function called when the specified menu item action has completed
         * @param Rally.data.wsapi.Model[] onActionComplete.successfulRecords any successfully modified records
         * @param Rally.data.wsapi.Model[] onActionComplete.unsuccessfulRecords any records which failed to be updated
         */
        onActionComplete: function(){
            console.log('onActionComplete');
        },

        text: 'Print Cards',

        handler: function (menuItem) {
            console.log('example menu item clicked',menuItem.records);
            this._openPrintCards(menuItem.records);

        },
        predicate: function (records) {
            return _.every(records, function (record) {
                return record;
            });
        }
    },
    _openPrintCards: function(records){
        
        var fields =[{
            dataIndex: 'Name',
            maxLength: 200,
            cls: 'card-title'
        },{
            dataIndex: 'FormattedID',
            cls: 'card-id'
        }];
//
        var win = Ext.create('Rally.technicalservices.window.PrintCards',{
            records: records,
            displayFields: fields,
            currentDocument: Ext.getDoc()
        });
        
        win.show();
        win.print();
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.CardConfiguration',{
    singleton: true,

    fetchFields: ["FormattedID","Name","Feature","Description",
        "Release","PlanEstimate",'c_ExtID01QCRequirement','Requirement','Project'],
                
    displayFields: {
        r1left: { 
            dataIndex: 'FormattedID'
        },
        r1middle: {
            dataIndex: function(recordData) {
                var feature = recordData.get('Feature');
                console.log(recordData);
                
                if ( recordData.get('_type') == 'defect' && recordData.get('Requirement') ) {
                    feature = recordData.get('Requirement').Feature;
                }
                if ( Ext.isEmpty(feature) ) {
                    return ' ';
                }
                
                return feature.FormattedID + ": " + Ext.util.Format.substr(feature.Name,0,5);
            },
            maxLength: 12
        },
        r1right: {
            dataIndex: function(recordData){   
                var release = recordData.get('Release');
                var release_name = "No Release";
                if ( !Ext.isEmpty(release) ) {
                    release_name = release.Name;
                }
                return release_name;
            },
            maxLength: 15
        },
        r2middle: {
            dataIndex: function(recordData) {
                var name = recordData.get('Name');
                var description = recordData.get('Description');
                
                return Ext.String.format('<strong>{0}</strong><br/><br/>{1}',
                    name,
                    description
                );
            }
        },
        r3left: {
            dataIndex: function(recordData) {
                //console.log('>>>>>>>>>',recordData.get('_type'));
                var qc_id = "";
                
                if(recordData.get('_type')=="hierarchicalrequirement"){
                    qc_id = recordData.get('c_ExtID01QCRequirement');
                }else if(recordData.get('_type')=="defect"){
                    qc_id = recordData.get('c_ExtID01QCBug');
                }
               
                return 'QC: ' + qc_id;
            }
        },
        r3middle: {
            dataIndex: function(recordData) {
                return recordData.get('Project').Name;
            }
        },
        r3right: {
            dataIndex: function(recordData) {
                return recordData.get('PlanEstimate');
            }
        }
        
    }
});

Ext.define('Rally.technicalservices.CardTemplate',{
    extend: 'Ext.XTemplate',

    constructor: function(config) {

        this.callParent([
            '<div class="artifact">',
                '<div class="r1">',
                    '<tpl if="this.displayFields.r1left>',
                        '<span class="r1left">{[this.getContent(values, this.displayFields.r1left)]}</span>',
                    '</tpl>',
                    '<tpl if="this.displayFields.r1middle">',
                        '<span class="r1middle">{[this.getContent(values, this.displayFields.r1middle)]}</span>',
                    '</tpl>',
                    '<tpl if="this.displayFields.r1right">',
                        '<span class="r1right">{[this.getContent(values, this.displayFields.r1right)]}</span>',
                    '</tpl>',
                '</div>',
                
                '<div class="r2">',
                    '<tpl if="this.displayFields.r2middle">',
                        '<span class="r2middle">{[this.getContent(values, this.displayFields.r2middle)]}</span>',
                    '</tpl>',
                '</div>',
                
                '<div class="r3">',
                    '<tpl if="this.displayFields.r3left>',
                        '<span class="r3left">{[this.getContent(values, this.displayFields.r3left)]}</span>',
                    '</tpl>',
                    '<tpl if="this.displayFields.r3middle">',
                        '<span class="r3middle">{[this.getContent(values, this.displayFields.r3middle)]}</span>',
                    '</tpl>',                    
                    '<tpl if="this.displayFields.r3right">',
                        '<span class="r3right">{[this.getContent(values, this.displayFields.r3right)]}</span>',
                    '</tpl>',
                '</div>',
            '</div>',

            {
                getContent: function(recordData, displayField) {

                    var val = recordData.get(displayField.dataIndex) || "&nbsp;";
                    if (displayField){
                        if (Ext.isFunction(displayField.dataIndex)){
                            val = displayField.dataIndex(recordData);
                        } else {
                            val = recordData.get(displayField.dataIndex) || "&nbsp;";
                        }
                        
                        if (displayField.maxLength > 0){
                            val = Ext.String.ellipsis(val, displayField.maxLength, false);
                        }
                    }
                    //console.log('getContent', recordData, displayField, val);
                    return val;
                },
                displayFields: config.displayFields
            }
        ]);
    }
});
Ext.override(Rally.ui.filter.CustomFilterRow, {
    _getItems: function() {
        var items = [
            {
                xtype: 'rallycombobox',
                itemId: 'fieldCombobox',
                disabled: true,
                autoLoad: false,
                defaultSelectionPosition: null,
                store: Ext.create('Ext.data.Store', {
                    fields: ['attributeDefinition', 'displayName', 'modelNames', 'name']
                }),
                displayField: 'displayName',
                emptyText: 'Choose Field...',
                valueField: 'name',
                matchFieldWidth: true,
                listeners: {
                    select: this._onFieldSelect,
                    afterrender: this._onFieldAfterRender,
                    expand: this._onFieldExpand,
                    scope: this
                },
                width: this.boxWidths.field,
                filterProperties: ['displayName'],
                listConfig: {
                    itemTpl: new Ext.XTemplate('' +
                        '{displayName}',
                        '<tpl if="this.hasModelNames(values)">',
                            '<div class="duplicate-field-model-name">- {modelNames}</div>',
                        '</tpl>',
                        {
                            hasModelNames: function (data) {
                                return data.modelNames.length > 0;
                            }
                        })
                }
            },
            {
                xtype: 'rallycombobox',
                itemId: 'operatorCombobox',
                disabled: true,
                autoLoad: false,
                editable: false,
                forceSelection: true,
                store: Ext.create('Ext.data.Store', {
                    fields: ['name', 'displayName'],
                    listeners: {
                        datachanged: this._onOperatorDataChanged,
                        scope: this
                    }
                }),
                displayField: 'displayName',
                valueField: 'name',
                matchFieldWidth: true,
                listeners: {
                    setvalue: this._onOperatorSetValue,
                    scope: this
                },
                width: this.boxWidths.operator
            }
        ];

        if (!this._hasInitialData()) {
            items.push({
                xtype: 'rallytextfield',
                itemId: 'valueField',
                disabled: true,
                height: 22,
                width: this.boxWidths.value
            });
        }
        return items;
    }

});

Ext.override(Rally.ui.filter.CustomFilterPanel,{
    _getItems: function() {
        return [
            {
                xtype: 'container',
                cls: 'custom-filter-header',
                layout: 'column',
                defaults: {
                    xtype: 'component',
                    cls: 'filter-panel-label'
                },
                items: [
                    {
                        height: 1,
                        width: 30
                    },
                    // CHANGED these values to make headers line up
                    {
                        html: 'Field',
                        width: this.boxWidths.field + 5 || 135
                    },
                    {
                        html: 'Operator',
                        width: this.boxWidths.operator + 5|| 140
                    },
                    {
                        html: 'Value',
                        width: this.boxWidths.value + 5 || 155
                    }
                ]
            },
            {
                xtype: 'container',
                itemId: 'customFilterRows'
            }
        ];
    }
});
Ext.override(Rally.ui.gridboard.plugin.GridBoardFieldPicker,{
    
    // add ability to override the properties of the popover, mostly so we can do height
    _getPopoverConfig: function() {
        return this.popoverConfig || {};
    },
    
    
    _createPopover: function(popoverTarget) {
        this.popover = Ext.create('Rally.ui.popover.Popover', 
            _.extend({
                target: popoverTarget,
                placement: ['bottom', 'left', 'top', 'right'],
                cls: 'field-picker-popover',
                toFront: Ext.emptyFn,
                buttonAlign: 'center',
                title: this.getTitle(),
                listeners: {
                    destroy: function () {
                        this.popover = null;
                    },
                    scope: this
                },
                buttons: [
                    {
                        xtype: "rallybutton",
                        text: 'Apply',
                        cls: 'field-picker-apply-btn primary rly-small',
                        listeners: {
                            click: function() {
                                this._onApply(this.popover);
                            },
                            scope: this
                        }
                    },
                    {
                        xtype: "rallybutton",
                        text: 'Cancel',
                        cls: 'field-picker-cancel-btn secondary dark rly-small',
                        listeners: {
                            click: function() {
                                this.popover.close();
                            },
                            scope: this
                        }
                    }
                ],
                items: [
                    _.extend({
                        xtype: 'rallyfieldpicker',
                        cls: 'field-picker',
                        itemId: 'fieldpicker',
                        modelTypes: this._getModelTypes(),
                        alwaysExpanded: true,
                        width: 200,
                        placeholderText: 'Search',
                        selectedTextLabel: 'Selected',
                        availableTextLabel: 'Available',
                        listeners: {
                            specialkey: function(field, e) {
                                if (e.getKey() === e.ESC) {
                                    this.popover.close();
                                }
                            },
                            scope: this
                        }
                    }, this._getPickerConfig())
                ]
            }, this._getPopoverConfig())
        );
    }
});
Ext.override(Rally.ui.grid.TreeGrid,{

    /* 
     * Override applyState so that the grid's state is merged with the provided configured
     * columns.  This allows changes to the required columns to be applied.
     */
    applyState: function(state) {
        
        if (state) {
            if (state.columns) {
                
                // state columns might be objects, and column configs be an array of strings
                var state_column_names =  Ext.Array.map(state.columns, function(column){
                    if ( Ext.isObject(column) ) {
                        return column.dataIndex;
                    }
                    return column;
                });
                
                // for columns passed in, use state-saved version if available
                
                var unused_cfgs = Ext.Array.filter(this.columnCfgs, function(column){
                    var ignore_column_names = ['FormattedID','Rank','DragAndDropRank','Name'];
                    
                    if ( Ext.isObject(column) ) {
                        if ( Ext.Array.contains(ignore_column_names, column.dataIndex)) {
                            return false;
                        }
                        
                        return ! Ext.Array.contains(state_column_names, column.dataIndex);
                    }
                    
                    if ( Ext.Array.contains(ignore_column_names, column)){
                        return false;
                    }
                    return ! Ext.Array.contains(state_column_names, column);
                });
                
                // put unused ones at the end
                this.columnCfgs = Ext.Array.merge(state.columns, unused_cfgs);
            }

            if (state.sorters && this.storeConfig ) {
                this.storeConfig.sorters = _.map(state.sorters, function(sorterState) {
                    return Ext.create('Ext.util.Sorter', {
                        property: sorterState.property,
                        direction: sorterState.direction
                    });
                });
            }
        }
    }
});


Ext.define('Rally.technicalservices.window.PrintCards',{
    extend: 'Ext.Window',
    logger: new Rally.technicalservices.Logger(),
    truncateText: '...',
    config: {
        title: 'Print Cards',
        records: null,
        styleSheetTitle: "printCards",
        currentDocument: null,
        /**
         *  Array of the following:
         *  dataIndex
         *  maxLength (default 0)
         *  cls (defaults are: card-title, content,
         */
        displayFields: null
    },
    constructor: function(config){
        this.initConfig(config);
    },
    show: function(){
        var options = "toolbar=1,menubar=1,scrollbars=yes,scrolling=yes,resizable=yes,width=1000,height=500";
        this.win = window.open('',this.title);

        var html = this._buildCardsHTML();

        this.win.document.write('<html><head><title>' + this.title + '</title>');
        this.win.document.write('<style>');
        this.win.document.write(this._getStyleSheet(this.styleSheetTitle));
        this.win.document.write('</style>');
        this.win.document.write('</head><body class="landscape">');
        this.win.document.write(html);
        this.win.document.write('</body></html>');
    },
    
    print: function() {
        if ( !this.win ) {
            this.show();
        }
        this.win.print();
        this.win.close();
    },
    
    _buildCardsHTML: function() {

        var html = '';
        var total_cards = this.records.length;
        var card_num = 0;

        var t = Ext.create('Rally.technicalservices.CardTemplate', {
            displayFields: Rally.technicalservices.CardConfiguration.displayFields
        });

        Ext.each(this.records, function(r){

            // changing to record so that setting new fields doesn't get lost
            //html += t.apply(r.getData());
            html += t.apply(r);

            card_num ++;
            if ((card_num) % 4 === 0) {
                html += '<div class=pb></div>';
            } else if (card_num === total_cards - 1) {
                html += '<div class=cb>&nbsp;</div>';
            }
        },this);
        //console.log('html',html);
        return html;
    },
    
    _getStyleSheet: function(styleSheetTitle) {
        this.logger.log('getStyleSheet');
        var styleSheet;
        // var docs = Ext.getDoc();
        var elems = this.currentDocument.query('style');

        for (var i=0; i< elems.length; i++){
            if (elems[i].title == styleSheetTitle){
                styleSheet = elems[i];
            }
        }
        return styleSheet.innerHTML;
    }
});
Ext.define('Rally.technicalservices.DashboardSettings',{
    selectedType: undefined,

});

Ext.override(Ext.util.Filter,{
    createFilterFn: function() {
        var me       = this,
            matcher  = me.createValueMatcher();
        
        var property = me.property;
        
        if ( !Ext.isArray(me.property) && /,/.test(me.property) ) {
            property = me.property.split(',');
        }
        
        return function(item) {
            var hasmatch = false;
            for(var i=0;i<property.length;i++) {
                if(matcher.test(me.getRoot.call(me, item)[property[i]])) {
                    hasmatch=true;
                    break;
                }
            }
            return matcher === null ? value === null : hasmatch;
        };
    }
});


Ext.override(Rally.ui.combobox.ComboBox, {

    doLocalQuery: function(queryPlan) {
        var me = this,
            queryString = queryPlan.query;

        // Create our filter when first needed
        if (!me.queryFilter) {
            // Create the filter that we will use during typing to filter the Store
            me.queryFilter = new Ext.util.Filter({
                id: me.id + '-query-filter',
                anyMatch: true,
                caseSensitive: false,
                root: 'data',
                property: me.filterProperties
            });
                        
            me.store.addFilter(me.queryFilter, false);
        }

        // Querying by a string...
        if (queryString || !queryPlan.forceAll) {
            me.queryFilter.disabled = false;
            me.queryFilter.setValue(me.enableRegEx ? new RegExp(queryString) : queryString);
        }

        // If forceAll being used, or no query string, disable the filter
        else {
            me.queryFilter.disabled = true;
        }

        // Filter the Store according to the updated filter
        me.store.filter();

        // Expand after adjusting the filter unless there are no matches
        if (me.store.getCount()) {
            me.expand();
        } else {
            me.collapse();
        }

        me.afterQuery(queryPlan);
    }
});


Ext.define('Rally.technicalservices.PortfolioParentComboBox',{
    extend: 'Rally.ui.combobox.FieldValueComboBox',
    _loadStoreValues: function() {
        this.field.getAllowedValueStore().load({
            requester: this,
            callback: function(records, operation, success) {
                var store = this.store;
                if (!store) {
                    return;
                }
                var noEntryValues = [],
                    labelValues = _.map(
                        _.filter(records, this._hasStringValue),
                        this._convertAllowedValueToLabelValuePair,
                        this
                    );

                if(this.field.getType() === 'boolean') {
                    labelValues = labelValues.concat([
                        this._convertToLabelValuePair('Yes', true),
                        this._convertToLabelValuePair('No', false)
                    ]);
                } else if (this.field.required === false) {
                    var name = "-- No Entry --",
                        value = "";
                    if (this.getUseNullForNoEntryValue()) {
                        value = null;
                    }
                    if (this.field.attributeDefinition.AttributeType.toLowerCase() === 'rating') {
                        name = this.getRatingNoEntryString();
                        value = "None";
                    }
                    noEntryValues.push(this._convertToLabelValuePair(name, value));
                }

                store.loadRawData(noEntryValues.concat(labelValues));
                store.fireEvent('load', store, store.getRange(), success);
            },
            scope: this
        });
    },

    _hasStringValue: function(allowedValueObject) {
        return allowedValueObject.get('StringValue') !== "";
    }
});

Ext.define('portfolio-item-selector', {
    extend : 'Ext.Container',
    componentCls : 'app',
    alias : 'widget.portfolioitemselector',
    layout : 'hbox',
    width : '100%',
    mixins : [
        'Rally.Messageable',
        'Ext.state.Stateful'
    ],
    stateful: true,
    stateEvents: ['change'],

    type: null,
    buttonText: 'Go',
    buttonPushed: false,

    constructor : function(config)
    {
        this.type = config.type;
        this.callParent(arguments);
    },
    initComponent : function()
    {
        this.callParent(arguments);
        this.removeAll();
        this._addSelector();

        // configured to allow others to ask what the current selection is,
        // in case they missed the initial message
        this.subscribe(this, 'requestPortfolioItem', this._requestPorfolioItem, this);

    },
    getState: function(){
        if (this.portfolioItem){
            return {portfolioItemRef: this.portfolioItem.get('_ref')};
        }
        return null;
    },
    applyState: function(state) {
//        if (!Ext.isEmpty(state) && !Ext.Object.isEmpty(state)){
//            var ref = Ext.create('Rally.util.Ref',state.portfolioItemRef),
//                type = ref.getType();
//
//            //don't apply the state if the type doesn't match.
//            if (this.type && this.type.toLowerCase() !== type.toLowerCase()){
//                this._updatePortfolioItem(null);
//                return;
//            }
//
//            Rally.data.ModelFactory.getModel({
//                type: type,
//                scope: this,
//                success: function(model) {
//                    model.load(ref.getOid(),{
//                        scope: this,
//                        callback: function(result, operation){
//                            if (result && operation.wasSuccessful()){
//                                this._updatePortfolioItem(result);
//                            } else {
//                                this._updatePortfolioItem(null);
//                                Rally.ui.notify.Notifier.showError({message: 'Could not load state for item [' + state + ']: ' + operation.error && operation.error.errors.join(',')});
//                            }
//
//                        }
//                    });
//                },
//                failure: function(){
//                    this._updatePortfolioItem(null);
//                    Rally.ui.notify.Notifier.showError({message: 'Could not load state for item [' + state + ']'});
//                }
//            });
//        } else {
//            this._updatePortfolioItem(null);
//        }
    },
    _updatePortfolioItem: function(){
        this.buttonPushed = true;
        var cb = this.down('#cb-portfolioitem');
        
        if (cb){
            var portfolioItem = cb.getRecord();
            this.portfolioItem = portfolioItem;
            this.fireEvent('change', portfolioItem);
            this.publish('portfolioItemSelected', portfolioItem);

            if (this.stateful && this.stateId){
                this.saveState();
            }
        }

    },
    _addSelector : function()
    {
        this.removeAll();
        if (!this.type){
            this.add({
                xtype: 'container',
                html: '<div class="message">Please configure a selector type in the app settings.</div>',
                padding: 10
            });
        } else {

            
            var cb = Ext.create('Rally.ui.combobox.ComboBox',{
                storeConfig: {
                    model: this.type,
                    fetch: ['FormattedID','ObjectID','Name'],
                    remoteFilter: false,
                    autoLoad: true,
                    limit: Infinity
                },
                allowNoEntry: true,
                noEntryText: '--None--',
                noEntryValue: 0,
                itemId: 'cb-portfolioitem',
                margin: 10,
                valueField: 'ObjectID',
                displayField: 'FormattedID',
                width: 600,
                listConfig: {
                    itemTpl: '<tpl>{FormattedID}: {Name}</tpl>'
                },
                filterProperties: ['Name','FormattedID','ObjectID'],
                fieldCls: 'pi-selector'
                ,
                displayTpl: '<tpl for=".">' +
                '<tpl>' +
                '{[values["FormattedID"]]}: {[values["Name"]]}' +
                '</tpl>' +
                '<tpl if="xindex < xcount">,</tpl>' +
                '</tpl>'
            });
            //cb.on('ready', this._updatePortfolioItem, this);
            //cb.on('change', this._updateGoButton, this);
            
            this.add(cb);
            
            this.add({
                xtype: 'rallybutton',
                text: this.buttonText,
                itemId: 'cb-go-button',
                cls: 'rly-small primary',
                //disabled: true,
                margin: 10,
                listeners: {
                    scope: this,
                    click: this._updatePortfolioItem
                }
            });
        }
    },
    
    // _updateGoButton: function(cb) {
    //     if ( !Ext.isEmpty(cb.getValue()) && cb.getValue() > 0 ) {
    //         this.down('#cb-go-button').setDisabled(false);
    //     } else {
    //         this.down('#cb-go-button').setDisabled(true);
    //     }
    // },
    
    _requestPorfolioItem : function() {
        // only publish if the go button has been pushed
        if ( this.buttonPushed ) {
            this.publish('portfolioItemSelected', this.portfolioItem || null);
            return;
        }
        
        console.log("Requested PI, but the user hasn't pushed the Go button");
        
    }
});
(function () {
    var Ext = window.Ext4 || window.Ext;

    var getHiddenFieldConfig = function (name) {
        return {
            name: name,
            xtype: 'rallytextfield',
            hidden: true,
            handlesEvents: {
                typeselected: function (type) {
                    this.setValue(null);
                }
            }
        };
    };

    Ext.define('Rally.technicalservices.PortfolioItemGridSettings', {
        singleton: true,
        requires: [
            'Rally.ui.combobox.FieldComboBox',
            'Rally.ui.combobox.ComboBox',
            'Rally.ui.CheckboxField'
        ],

        getFields: function (context, settings) {
            var type_filters = Rally.data.wsapi.Filter.or([
                {property: 'TypePath', value: 'HierarchicalRequirement'},
                // {property: 'TypePath', operator: 'contains', value: 'PortfolioItem/'},
                {property: 'TypePath', value: 'Defect'}
            ]);
            var filters = [{property: 'TypePath', operator: 'contains', value: 'PortfolioItem/'}];
            return [
                // {
                //     name: 'showScopeSelector',
                //     xtype: 'rallycheckboxfield',
                //     fieldLabel: 'Show Scope Selector',
                //     bubbleEvents: ['change']
                // },
                {
                    name: 'selectorType',
                    xtype: 'rallycombobox',
                    allowBlank: false,
                    autoSelect: false,
                    shouldRespondToScopeChange: true,
                    fieldLabel: 'Selector Type',
                    context: context,
                    storeConfig: {
                        model: Ext.identityFn('TypeDefinition'),
                        sorters: [{ property: 'DisplayName' }],
                        fetch: ['DisplayName', 'ElementName', 'TypePath', 'Parent', 'UserListable'],
                        filters: filters,
                        autoLoad: false,
                        remoteSort: false,
                        remoteFilter: true
                    },
                    displayField: 'DisplayName',
                    valueField: 'TypePath',
                    readyEvent: 'ready'
                    // ,
                    // handlesEvents: {
                    //     change: function(chk){
                    //         this.setDisabled(chk.getValue()!==true);
                    //     }
                    // }
                },
                {
                    name: 'type',
                    xtype: 'rallycombobox',
                    allowBlank: false,
                    autoSelect: false,
                    multiSelect: true,
                    shouldRespondToScopeChange: true,
                    fieldLabel: 'Results Type',
                    context: context,
                    initialValue: 'HierarchicalRequirement',
                    storeConfig: {
                        model: Ext.identityFn('TypeDefinition'),
                        sorters: [{ property: 'DisplayName' }],
                        fetch: ['DisplayName', 'ElementName', 'TypePath', 'Parent', 'UserListable'],
                        filters: type_filters,
                        autoLoad: false,
                        remoteSort: false,
                        remoteFilter: true
                    },
                    displayField: 'DisplayName',
                    valueField: 'TypePath',
                    listeners: {
                        setvalue: function() {
                            if ( this.getRecord() ) {
                                this.fireEvent('typeselected', this.getRecord().get('TypePath'), this.context);
                            }
//                        },
//                        change: function (combo) {
//                            console.log('changed');
//                            combo.fireEvent('typeselected', combo.getRecord().get('TypePath'), combo.context);
                        }
                    },
                    bubbleEvents: ['typeselected'],
                    readyEvent: 'ready',
                    handlesEvents: {
                        projectscopechanged: function (context) {
                            this.refreshWithNewContext(context);
                        }
                    }
                },
                // {
                //     xtype: 'rallyfieldpicker',
                //     name: 'columnNames',
                //     autoExpand: true,
                //     modelTypes: ['HierarchicalRequirement'],
                //     alwaysSelectedValues: ['FormattedID','DragAndDropRank','Rank','Name'],
                //     handlesEvents: {
                //         typeselected: function(cb){
                //             this.refreshWithNewModelTypes([cb]);
                //         }
                //     }
                // },
                { type: 'query' },
                {
                    name: 'showControls',
                    xtype: 'rallycheckboxfield',
                    fieldLabel: 'Show Control Bar'
                },
               // getHiddenFieldConfig('columnNames'),
                getHiddenFieldConfig('order')
            ];
        }
    });
})();
Ext.define('Rally.technicalservices.WsapiToolbox', {
    singleton: true,
    fetchWsapiCount: function(model, query_filters){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: ['ObjectID'],
            filters: query_filters,
            limit: 1,
            pageSize: 1
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} count for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchModelTypePathByTypeDefinition: function(typeDef){
        var deferred = Ext.create('Deft.Deferred');
        var typeDefId = 0;
        if (typeDef){
            typeDefId = typeDef.replace('/typedefinition/','');
        }

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: 'TypeDefinition',
            fetch: ['TypePath','Name'],
            filters: [{
                property: 'ObjectID',
                value: typeDefId
            }]
        }).load({
            callback: function(records, operation, success){
                if (success && records && records.length > 0){
                    deferred.resolve(records[0].get('TypePath'));
                } else {
                    deferred.resolve(null); //(Ext.String.format("Error getting TypeDefinition for {1}: {0}", operation.error.errors.join(','), typeDef));
                }
            }
        });
        return deferred;
    },
    fetchWsapiRecords: function(model, query_filters, fetch_fields, context){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: fetch_fields,
            filters: query_filters,
            context: context,
            limit: Infinity
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0} for {1}: {2}", model, query_filters.toString(), operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchReleases: function(timebox){

        var deferred = Ext.create('Deft.Deferred'),
            rec = timebox.getRecord(),
            me = this;

        if (rec === null) {
            deferred.resolve([]);
        }

        Ext.create('Rally.data.wsapi.Store',{
            model: 'Release',
            fetch: ['ObjectID'],
            filters: [{
                property: 'Name',
                value: rec.get('Name')
            },{
                property: 'ReleaseStartDate',
                value: rec.get('ReleaseStartDate')
            },{
                property: 'ReleaseDate',
                value: rec.get('ReleaseDate')
            }],
            limit: Infinity
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                }   else {
                    deferred.reject("Error loading Releases: " + operation.error.errors.join(','));
                }
            }
        });
        return deferred;
    },

    fetchAllowedValues: function(model,field_name) {
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            type: model,
            success: function(model) {
                model.getField(field_name).getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        var values = Ext.Array.map(records, function(record) {
                            return record.get('StringValue');
                        });
                        deferred.resolve(values);
                    }
                });
            },
            failure: function(msg) { deferred.reject('Error loading field values: ' + msg); }
        });
        return deferred;
    },
    fetchPortfolioItemTypes: function(){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store', {
            model: 'TypeDefinition',
            fetch: ['TypePath', 'Ordinal','Name'],
            filters: [{
                property: 'TypePath',
                operator: 'contains',
                value: 'PortfolioItem/'
            }],
            sorters: [{
                property: 'Ordinal',
                direction: 'ASC'
            }]
        });
        store.load({
            callback: function(records, operation, success){
                if (success){
                    var portfolioItemTypes = new Array(records.length);
                    _.each(records, function(d){
                        //Use ordinal to make sure the lowest level portfolio item type is the first in the array.
                        var idx = Number(d.get('Ordinal'));
                        portfolioItemTypes[idx] = { typePath: d.get('TypePath'), name: d.get('Name') };
                        //portfolioItemTypes.reverse();
                    });
                    deferred.resolve(portfolioItemTypes);
                } else {
                    var error_msg = '';
                    if (operation && operation.error && operation.error.errors){
                        error_msg = operation.error.errors.join(',');
                    }
                    deferred.reject('Error loading Portfolio Item Types:  ' + error_msg);
                }
            }
        });
        return deferred.promise;
    },
    fetchDoneStates: function(){
        var deferred = Ext.create('Deft.Deferred');
        Rally.data.ModelFactory.getModel({
            type: 'HierarchicalRequirement',
            success: function(model) {
                var field = model.getField('ScheduleState');
                field.getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        if (success){
                            var values = [];
                            for (var i=records.length - 1; i > 0; i--){
                                values.push(records[i].get('StringValue'));
                                if (records[i].get('StringValue') == "Accepted"){
                                    i = 0;
                                }
                            }
                            deferred.resolve(values);
                        } else {
                            deferred.reject('Error loading ScheduleState values for User Story:  ' + operation.error.errors.join(','));
                        }
                    },
                    scope: this
                });
            },
            failure: function() {
                var error = "Could not load schedule states";
                deferred.reject(error);
            }
        });
        return deferred.promise;
    },
    fetchTypeDefinition: function(typePath){
        var deferred = Ext.create('Deft.Deferred');

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: 'TypeDefinition',
            fetch: ['TypePath','Name'],
            filters: [{
                property: 'TypePath',
                value: typePath
            }]
        }).load({
            callback: function(records, operation, success){
                if (success && records && records.length > 0){
                    deferred.resolve(records[0]);
                } else {
                    var message = "No records returned when loading Type Definition for " + typePath;
                    if (!success){
                        message = "Error loading Type Definition for " + typePath + ':  ' + operation.error.errors.join(',');
                    }
                    deferred.reject(message); //(Ext.String.format("Error getting TypeDefinition for {1}: {0}", operation.error.errors.join(','), typeDef));
                }
            }
        });
        return deferred;
    }
});

Ext.define("PPIC", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    config: {
        defaultSettings: {
            showScopeSelector: true,
            selectorType: null,
            type: ['hierarchicalrequirement','defect'],
            columnNames: ['FormattedID','Name'],
            showControls: true
        }
    },

    disallowedAddNewTypes: ['user', 'userprofile', 'useriterationcapacity', 'testcaseresult', 'task', 'scmrepository', 'project', 'changeset', 'change', 'builddefinition', 'build', 'program'],
    orderedAllowedPageSizes: [10, 25, 50, 100, 200],

    launch: function() {
        Rally.technicalservices.WsapiToolbox.fetchPortfolioItemTypes().then({
            success: function(portfolioItemTypes){
                this.portfolioItemTypes = portfolioItemTypes;
                this.addComponents();
            },
            failure: function(msg){
                this.logger.log('failed to load Portfolio Item Types', msg);
                Rally.ui.notify.Notifier.showError({message: msg});
            },
            scope: this
        });
    },
    gHeader: function(){
        this.logger.log('getHeader');
        return this.headerContainer;
    },
    getBody: function(){
        return this.displayContainer;
    },
    getGridboard: function(){
        return this.gridboard;
    },
    getModelNames: function(){
        var models = this.getSetting('type') || [];
        if (!(models instanceof Array)){
            models = models.split(',');
        }
        return models;  
        //return ['HierarchicalRequirement','Defect'];     
    },
    addComponents: function(){
        this.logger.log('addComponents',this.portfolioItemTypes);

        this.removeAll();

        this.headerContainer = this.add({xtype:'container',itemId:'header-ct', layout: {type: 'hbox'}});
        this.displayContainer = this.add({xtype:'container',itemId:'body-ct', tpl: '<tpl>{message}</tpl>'});

        this.headerContainer.add({
            xtype:'rallyiterationcombobox',
            fieldLabel: 'Iteration:',
            margin: 10,
            labelWidth: 55,
            width: 275,
            allowClear: true
        });

        this.headerContainer.add({
            xtype: 'portfolioitemselector',
            context: this.getContext(),
            type: this.getSetting('selectorType'),
            stateful: false,
            stateId: this.getContext().getScopedStateId('app-selector'),
            width: '75%',
            listeners: {
                change: this.updatePortfolioItem,
                scope: this
            }
        });
        
    },
    updateDashboardFilter: function(dashboardSettings){
        this.logger.log('updateDashboardFilter', dashboardSettings);

        this.getBody().removeAll();
        this.dashboardFilter = Rally.data.wsapi.Filter.fromQueryString(dashboardSettings.getFilterString());
        this.loadGridBoard();

    },
    updatePortfolioItem: function(portfolioItemRecord){
        this.logger.log('updatePortfolioItem', portfolioItemRecord);
        this.iteration = this.down('rallyiterationcombobox').getRecord();
        console.log('this.Iteration>>',this.iteration);
        this.getBody().removeAll();
        this.portfolioItem = portfolioItemRecord;
        this.loadGridBoard();

    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.addComponents();
    },
    getSettingsFields: function() {
       return Rally.technicalservices.PortfolioItemGridSettings.getFields(this.getContext(), this.getSettings() || this.config.defaultSettings);
    },
    loadGridBoard: function(){
        this.logger.log('loadGridBoard', this.getModelNames())
        this.enableAddNew = this._shouldEnableAddNew();
        this.enableRanking = this._shouldEnableRanking();

        Rally.data.ModelFactory.getModels({
            context: this.getContext(),
            types: this.getModelNames(),
            requester: this
        }).then({
            success: function (models) {
                console.log('Models>>>',models);
                this.models = _.transform(models, function (result, value) {
                    result.push(value);
                }, []);

                this.modelNames = _.keys(models);
                //console.log('models>>>>>',_.clone(this.models));
                console.log('this.modelNames>>>',this.modelNames);
                Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
                    autoLoad: true,
                    childPageSizeEnabled: true,
                    context: this.getContext().getDataContext(),
                    enableHierarchy: false,
                    fetch: this.columns, //this.columnNames,
                    models: this.getModelNames(),//_.clone(this.models),
                    pageSize: 25,
                    remoteSort: true,
                    filters: this.getPermanentFilters(),
                    root: {expanded: true}
                }).then({
                    success: this.addGridBoard,
                    scope: this
                });
            },
            scope: this
        });

    },
    getPermanentFilters: function () {
        var filters = this._getQueryFilter().concat(this._getPortfolioItemFilter());
        this.logger.log('filter before iteration',filters);
        if(this.iteration){
            iteration_filters  = Ext.create('Rally.data.wsapi.Filter',{property:'Iteration.Name',value:this.iteration.get('Name')});
            if(filters && filters.length > 0){
                filters = Rally.data.wsapi.Filter.and(filters).and(iteration_filters);
            }else{
                filters = iteration_filters;
            }
            
        }
        this.logger.log('getPermanentFilters', filters.toString());
        return filters;
    },
    _getQueryFilter: function () {
        var query = new Ext.Template(this.getSetting('query')).apply({
            projectName: this.getContext().getProject().Name,
            projectOid: this.getContext().getProject().ObjectID,
            user: this.getContext().getUser()._ref
        });
        var filter = [];
        if (query) {
            try {
                filter =  [ Rally.data.wsapi.Filter.fromQueryString(query) ];
            } catch(e) {
                Rally.ui.notify.Notifier.showError({ message: e.message });
                return filter;
            }
        }
        console.log('model for filters >>>',this.models);
        var invalidQueryFilters = this._findInvalidSubFilters(filter, this.models);
        console.log('invalidQueryFilters >>>',invalidQueryFilters);

        if (invalidQueryFilters.length) {
            filter = [];
            var msg = _.map(invalidQueryFilters, function (filter) {
                return 'Could not find the attribute "'+ filter.property.split('.')[0] +'" on type "'+ this.models[0].displayName +'" in the query segment "'+ filter.toString() + '"'
            }, this);

                Rally.ui.notify.Notifier.showError({message: "Query is invalid:  " + msg });
        }
        return filter;
    },
    _propertyBelongsToSomeType: function(property, models){
        return _.some(models, function(model) {
            var field = model.getField(property) || model.getField(Ext.String.capitalize(property || ''));
            return field && !field.virtual;
        });
    },
    _findInvalidSubFilters: function(filters, models){
        return _(filters).map(this._getSubFilters, this).flatten().filter(function (subFilter) {
            return !this._propertyBelongsToSomeType(subFilter.property.split('.')[0], models);
        }, this).map(function (filter) {
            return Ext.create('Rally.data.wsapi.Filter', filter);
        }, this).value();
    },
    _getSubFilters: function(filter){
        var subFilters = [];
        var filterTraversal = function(filter) {
            if (_.isString(filter.property) && !_.contains(subFilters, filter.property) && filter.property !== 'TypeDefOid') {
                subFilters.push(filter);
            } else {
                if (_.isObject(filter.property)) {
                    filterTraversal(filter.property);
                }
                if (_.isObject(filter.value)) {
                    filterTraversal(filter.value);
                }
            }
        };

        filterTraversal(filter);

        return subFilters;
    },
    _getPortfolioItemFilter: function(){
        this.logger.log('_getPortfolioItemFilter', this.portfolioItem)

        if (!this.portfolioItem || this.portfolioItem.get('ObjectID') == 0){
            return [];
        }
        //First verify that the selected portfolio item type is an ancestor to the selected grid type.
        var pi_types = _.map(this.portfolioItemTypes, function(pi){return pi.typePath.toLowerCase()}),
            idx = _.indexOf(pi_types, this.portfolioItem.get('_type').toLowerCase()),
            type_idx = _.indexOf(pi_types, this.getSetting('type').toLowerCase());
        this.logger.log('_getPortfolioItemFilter', type_idx, idx)
        if (type_idx < idx) {
            var properties = [];
            for (var i = type_idx; i < idx; i++) {
                if (i < 0) {
                    properties.push("PortfolioItem");
                } else {
                    properties.push('Parent');
                }
            }
            this.logger.log('_getPortfolioItemFilter', properties);
            return Ext.create('Rally.data.wsapi.Filter', {
                property: properties.join('.'),
                value: this.portfolioItem.get('_ref')
            });
        } else if (type_idx === idx){
            return Ext.create('Rally.data.wsapi.Filter', {
                property: 'ObjectID',
                value: this.portfolioItem.get('ObjectID')
            });
        } else {
            Rally.ui.notify.Notifier.showError({message: "The selected type for the grid results is an ancestor to the selected portfolio item."});
            return [{property: 'ObjectID', value: 0}];
        }
        return [];
    },
    
    addGridBoard: function (store) {
        if (this.getGridboard()) {
            this.getGridboard().destroy();
        }
        //var modelNames =  ['userstory','defect'],
        var modelNames =  this.getModelNames(), //_.clone(this.modelNames),
            context = this.getContext(),
            columns = this._getColumns(),
            filters = this.getPermanentFilters();
                
        var gridboard = Ext.create('Rally.ui.gridboard.GridBoard', {
            itemId: 'gridboard',
            toggleState: 'grid',
            store: store,
            context: this.getContext(),
            plugins:[
            {
                ptype: 'rallygridboardfieldpicker',
                headerPosition: 'left',
                margin: '3 0 0 10'
            }
            ,
            {
                 ptype: 'rallygridboardinlinefiltercontrol',
                 inlineFilterButtonConfig: {
                     modelNames: modelNames,
                     inlineFilterPanelConfig: {
                         collapsed: false,
                         quickFilterPanelConfig: {
                             fieldNames: ['Owner', 'ScheduleState']
                         }
                     }
                 }
             }

            // ,
            // {
            //         ptype: 'rallygridboardcustomfiltercontrol',
            //         filterControlConfig: {
            //             modelNames: modelNames,//['HierarchicalRequirement','Defect'],
            //             stateful: true,
            //             stateId: this.getContext().getScopedStateId('portfolio-grid-filter-2')
            //         },
            //         showOwnerFilter: true,
            //         ownerFilterControlConfig: {
            //            stateful: true,
            //            stateId: this.getContext().getScopedStateId('portfolio-owner-filter-2')
            //         }
            //     }

            ],
            storeConfig: {
                filters: filters
            }
            ,
            gridConfig: {
                // allColumnsStateful: true,
                stateful: true,
                stateId: this.getContext().getScopedStateId('portfolio-grid-grid-2'),
                state: ['columnschanged','viewready','reconfigure'],
                store: store,
                columnCfgs: this._getColumns(),
                height: this.getHeight(),
                bulkEditConfig: {
                    items: [{
                        xtype: 'examplebulkrecordmenuitem'
                    }]
                }
            }
        });

        this.gridboard = this.add(gridboard);

        if (!this.getSetting('showControls')) {
            gridboard.getHeader().hide();
        }
    },
    
    _openPrintCards: function(records){
        this.logger.log('_openPrintCards', records);
        
        var fields =[{
            dataIndex: 'Name',
            maxLength: 200,
            cls: 'card-title'
        },{
            dataIndex: 'FormattedID',
            cls: 'card-id'
        }];
//
        var win = Ext.create('Rally.technicalservices.window.PrintCards',{
            records: records,
            displayFields: fields,
            currentDocument: Ext.getDoc()
        });
        
        win.show();
        win.print();
    },

    _getAlwaysSelectedFields: function() {
        var columns = this.getSetting('columnNames') ;
                
        if ( Ext.isEmpty(columns) ) {
            return [];
        }
        
        if ( Ext.isString(columns) ) {
            return columns.split(',');
        }
        
        columns = Ext.Array.filter( columns, function(column){
            return ( column != 'FormattedID' );
        });
        
        return Ext.Array.unique( columns );
    },

    _getColumns: function() {
        return this._getAlwaysSelectedFields();
    },
    
    _shouldEnableAddNew: function() {
        return !_.contains(this.disallowedAddNewTypes, this.getSetting('type').toLowerCase());
    },

    _shouldEnableRanking: function(){
        return this.getSetting('type').toLowerCase() !== 'task';
    }
});

            
               Rally.launchApp('PPIC', {
                   name: 'Print Portfolio Item Grid'
               });
        });
    </script>
    
<!--    <style type="text/css"> -->

<style type="text/css" title="printCards">
/* PLEASE LEAVE THIS STYLESHEET INLINE SINCE TITLE IS NECESSARY */
@media print {
    #interface {
        display: none;
    }

    .pb {
        page-break-after: always;
        clear: both;
    }
}

#interface, #printSection {
    margin: 20px;
}

html {
    background-color: #fff;
    color: #000;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin: 0;
    padding: 0;
}

body {
    background-color: #fff;
    margin: 0;
    padding: 0;
}

.cb {
    clear: both;
}

.artifact {
    background-color: #fff;
    border: 2px solid #000;
    float: left;
    width: 4.55in;
    margin: 0.3in 0in 0in 0.3in;
    position: relative;
    overflow: hidden;
}
.r1 {
    display: table-row;
    border: 1px;
    border-bottom-style: solid;
    margin-bottom: 2px;
    height: 0.5in;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    color: #000000;
    text-align: center;
}

.r1left {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    border-right: 1px solid #000;
    width: 1.5in;
}

.r1middle {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    width: 1.75in;
    border-right: 1px solid #000;
}

.r1right {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    width: 1.5in;
}

.r2{
    border: 1px;
    border-top-style: solid;
    border-bottom-style: solid;
    margin-top: 2px;
    font-family: NotoSans, Helvetica, Arial;
    font-size: 12pt;
    padding-left: 0.5em;
    overflow: hidden;
    padding-right: 0.5em;
}

.r2middle {
    display: block;
    vertical-align: middle;
    text-align: left;
    height: 2.25in;
}
/*
.r3{
    border: 1px;
    border-bottom-style: solid;
    height: 0.5in;
    padding-left: 0.5em;
    text-align: center;
}

.r3left {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    border-right: 1px solid #000;
    width: 2.3in;
}

.r3right {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    width: 2.3in;
}
*/

.r3 {
    border: 1px;
    border-bottom-style: solid;
    height: 0.5in;
    padding-left: 0.5em;
    text-align: center;
}

.r3left {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    border-right: 1px solid #000;
    width: 1.75in;
}

.r3middle {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    font-family: NotoSans, Helvetica, Arial;
    font-size: 10pt;
    border-right: 1px solid #000;
    width: 2.5in;
}

.r3right {
    display: table-cell;
    padding-top: 0.5em;
    padding-left: 0.5em;
    overflow: hidden;
    width: 0.5in;
}

.header {
    border: 1px;
    border-bottom-style: solid;
    display: table-cell;
    height: 40px;
    vertical-align: middle;
}

.card-title {
    font: bold 28px Genova, sans-serif;
    padding-top: 0.5em;
    text-align: center;
}

.description {
    float: left;
    font: 12pt Georgia, sans-serif;
    margin: 0.25em auto 0 auto;
    padding-left: 1.0em;
    padding-right: 1.0em;
    overflow-y: hidden;
    width: 100%;
    word-wrap: break-word;
}

.owner {
    float: right;
    height: 40px;
}

.ownerText {
    float: right;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin-right: 0.3em;
    margin-top: 0.3em;
}

.card-id {
    float: left;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin-left: 0.25em;
    margin-top: 0.3em;
}

.estimate {
    bottom: 0.5em;
    position: absolute;
    right: 0.5em;
}

.content {
    height: 2.4in;
    overflow: hidden;
}
</style>
<style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
</style>
 <!--   </style> -->

</head>
<body></body>
</html>